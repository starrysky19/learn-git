{"ast":null,"code":"var _jsxFileName = \"/home/s/Documents/starryskygithub/projects/learngit/src/MarkdownComponent.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import marked from 'marked';\n\n// function MarkdownComponent({ markdownFile }) {\n//   const [html, setHtml] = useState('');\n\n//   useEffect(() => {\n//     fetch(markdownFile)\n//       .then(response => response.text())\n//       .then(text => setHtml(marked(text)));\n//   }, [markdownFile]);\n\n//   return (\n//     <div className=\"markdown-main\" dangerouslySetInnerHTML={{ __html: html }} />\n//   );\n// }\n\n// export default MarkdownComponent;\nimport React, { useState, useEffect } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { solarizedlight } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport './MarkdownComponent.css'; // For styling the markdown\n\n// Custom component to render code blocks with syntax highlighting\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeBlock = ({\n  language,\n  value\n}) => {\n  return /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n    language: language || 'javascript',\n    style: solarizedlight,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_c = CodeBlock;\nfunction MarkdownComponent({\n  markdownFile\n}) {\n  _s();\n  const [markdownContent, setMarkdownContent] = useState('');\n  useEffect(() => {\n    fetch(markdownFile).then(response => response.text()).then(text => setMarkdownContent(text));\n  }, [markdownFile]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"markdown-main\",\n    children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n      children: markdownContent,\n      components: {\n        code: ({\n          node,\n          inline,\n          className,\n          children,\n          ...props\n        }) => {\n          // Safe fallback for className check without optional chaining\n          const language = className ? className.replace('language-', '') : null;\n          return !inline ? /*#__PURE__*/_jsxDEV(CodeBlock, {\n            language: language,\n            value: String(children).replace(/\\n$/, '')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"code\", {\n            ...props,\n            children: children\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n_s(MarkdownComponent, \"oNm/x9WZg9OkqsemXr5gQoqoCWc=\");\n_c2 = MarkdownComponent;\nexport default MarkdownComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"CodeBlock\");\n$RefreshReg$(_c2, \"MarkdownComponent\");","map":{"version":3,"names":["React","useState","useEffect","ReactMarkdown","Prism","SyntaxHighlighter","solarizedlight","jsxDEV","_jsxDEV","CodeBlock","language","value","style","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","MarkdownComponent","markdownFile","_s","markdownContent","setMarkdownContent","fetch","then","response","text","className","components","code","node","inline","props","replace","String","_c2","$RefreshReg$"],"sources":["/home/s/Documents/starryskygithub/projects/learngit/src/MarkdownComponent.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import marked from 'marked';\n\n// function MarkdownComponent({ markdownFile }) {\n//   const [html, setHtml] = useState('');\n\n//   useEffect(() => {\n//     fetch(markdownFile)\n//       .then(response => response.text())\n//       .then(text => setHtml(marked(text)));\n//   }, [markdownFile]);\n\n//   return (\n//     <div className=\"markdown-main\" dangerouslySetInnerHTML={{ __html: html }} />\n//   );\n// }\n\n\n// export default MarkdownComponent;\nimport React, { useState, useEffect } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { solarizedlight } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport './MarkdownComponent.css';  // For styling the markdown\n\n// Custom component to render code blocks with syntax highlighting\nconst CodeBlock = ({ language, value }) => {\n  return (\n    <SyntaxHighlighter language={language || 'javascript'} style={solarizedlight}>\n      {value}\n    </SyntaxHighlighter>\n  );\n};\n\nfunction MarkdownComponent({ markdownFile }) {\n  const [markdownContent, setMarkdownContent] = useState('');\n\n  useEffect(() => {\n    fetch(markdownFile)\n      .then(response => response.text())\n      .then(text => setMarkdownContent(text));\n  }, [markdownFile]);\n\n  return (\n    <div className=\"markdown-main\">\n      {/* Render the markdown content using react-markdown */}\n      <ReactMarkdown\n        children={markdownContent}\n        components={{\n          code: ({ node, inline, className, children, ...props }) => {\n            // Safe fallback for className check without optional chaining\n            const language = className ? className.replace('language-', '') : null;\n            return !inline ? (\n              <CodeBlock language={language} value={String(children).replace(/\\n$/, '')} />\n            ) : (\n              <code {...props}>{children}</code>\n            );\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport default MarkdownComponent;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,aAAa,MAAM,gBAAgB;AAC1C,SAASC,KAAK,IAAIC,iBAAiB,QAAQ,0BAA0B;AACrE,SAASC,cAAc,QAAQ,gDAAgD;AAC/E,OAAO,yBAAyB,CAAC,CAAE;;AAEnC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAM,CAAC,KAAK;EACzC,oBACEH,OAAA,CAACH,iBAAiB;IAACK,QAAQ,EAAEA,QAAQ,IAAI,YAAa;IAACE,KAAK,EAAEN,cAAe;IAAAO,QAAA,EAC1EF;EAAK;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAExB,CAAC;AAACC,EAAA,GANIT,SAAS;AAQf,SAASU,iBAAiBA,CAAC;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EAC3C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAE1DC,SAAS,CAAC,MAAM;IACdsB,KAAK,CAACJ,YAAY,CAAC,CAChBK,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACE,IAAI,IAAIJ,kBAAkB,CAACI,IAAI,CAAC,CAAC;EAC3C,CAAC,EAAE,CAACP,YAAY,CAAC,CAAC;EAElB,oBACEZ,OAAA;IAAKoB,SAAS,EAAC,eAAe;IAAAf,QAAA,eAE5BL,OAAA,CAACL,aAAa;MACZU,QAAQ,EAAES,eAAgB;MAC1BO,UAAU,EAAE;QACVC,IAAI,EAAEA,CAAC;UAAEC,IAAI;UAAEC,MAAM;UAAEJ,SAAS;UAAEf,QAAQ;UAAE,GAAGoB;QAAM,CAAC,KAAK;UACzD;UACA,MAAMvB,QAAQ,GAAGkB,SAAS,GAAGA,SAAS,CAACM,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,GAAG,IAAI;UACtE,OAAO,CAACF,MAAM,gBACZxB,OAAA,CAACC,SAAS;YAACC,QAAQ,EAAEA,QAAS;YAACC,KAAK,EAAEwB,MAAM,CAACtB,QAAQ,CAAC,CAACqB,OAAO,CAAC,KAAK,EAAE,EAAE;UAAE;YAAApB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,gBAE7ET,OAAA;YAAA,GAAUyB,KAAK;YAAApB,QAAA,EAAGA;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAClC;QACH;MACF;IAAE;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACI,EAAA,CA5BQF,iBAAiB;AAAAiB,GAAA,GAAjBjB,iBAAiB;AA8B1B,eAAeA,iBAAiB;AAAC,IAAAD,EAAA,EAAAkB,GAAA;AAAAC,YAAA,CAAAnB,EAAA;AAAAmB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}