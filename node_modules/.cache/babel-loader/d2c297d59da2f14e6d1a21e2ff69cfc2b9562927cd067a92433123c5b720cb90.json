{"ast":null,"code":"var _jsxFileName = \"/home/s/Documents/starryskygithub/projects/learngit/src/MarkdownComponent.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import marked from 'marked';\n\n// function MarkdownComponent({ markdownFile }) {\n//   const [html, setHtml] = useState('');\n\n//   useEffect(() => {\n//     fetch(markdownFile)\n//       .then(response => response.text())\n//       .then(text => setHtml(marked(text)));\n//   }, [markdownFile]);\n\n//   return (\n//     <div className=\"markdown-main\" dangerouslySetInnerHTML={{ __html: html }} />\n//   );\n// }\n\n// export default MarkdownComponent;\n// import React, { useState, useEffect } from 'react';\n// import ReactMarkdown from 'react-markdown';\n// import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n// import { solarizedlight } from 'react-syntax-highlighter/dist/esm/styles/prism';\n// import './MarkdownComponent.css';  // For styling the markdown\n\n// // Custom component to render code blocks with syntax highlighting\n// const CodeBlock = ({ language, value }) => {\n//   return (\n//     <SyntaxHighlighter language={language || 'javascript'} style={solarizedlight}>\n//       {value}\n//     </SyntaxHighlighter>\n//   );\n// };\n\n// function MarkdownComponent({ markdownFile }) {\n//   const [markdownContent, setMarkdownContent] = useState('');\n\n//   useEffect(() => {\n//     fetch(markdownFile)\n//       .then(response => response.text())\n//       .then(text => setMarkdownContent(text));\n//   }, [markdownFile]);\n\n//   return (\n//     <div className=\"markdown-main\">\n//       {/* Render the markdown content using react-markdown */}\n//       <ReactMarkdown\n//         children={markdownContent}\n//         components={{\n//           code: ({ node, inline, className, children, ...props }) => {\n//             // Safe fallback for className check without optional chaining\n//             const language = className ? className.replace('language-', '') : null;\n//             return !inline ? (\n//               <CodeBlock language={language} value={String(children).replace(/\\n$/, '')} />\n//             ) : (\n//               <code {...props}>{children}</code>\n//             );\n//           },\n//         }}\n//       />\n//     </div>\n//   );\n// }\n\n// export default MarkdownComponent;\nimport React, { useState, useEffect } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { solarizedlight } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport './MarkdownComponent.css'; // For styling the markdown\n\n// Custom component to render code blocks with syntax highlighting\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeBlock = ({\n  language,\n  value\n}) => {\n  const handleCopyClick = () => {\n    // Copy the code to the clipboard\n    navigator.clipboard.writeText(value).then(() => {\n      alert('Code copied to clipboard!');\n    }).catch(err => {\n      alert('Failed to copy code: ', err);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"code-block-container\",\n    children: [/*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n      language: language || 'javascript',\n      style: solarizedlight,\n      children: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"copy-button\",\n      onClick: handleCopyClick,\n      children: \"Copy Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_c = CodeBlock;\nfunction MarkdownComponent({\n  markdownFile\n}) {\n  _s();\n  const [markdownContent, setMarkdownContent] = useState('');\n  useEffect(() => {\n    fetch(markdownFile).then(response => response.text()).then(text => setMarkdownContent(text));\n  }, [markdownFile]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"markdown-main\",\n    children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n      children: markdownContent,\n      components: {\n        // Handle code blocks and apply syntax highlighting\n        code: ({\n          node,\n          inline,\n          className,\n          children,\n          ...props\n        }) => {\n          const language = className ? className.replace('language-', '') : null;\n          return !inline ? /*#__PURE__*/_jsxDEV(CodeBlock, {\n            language: language,\n            value: String(children).replace(/\\n$/, '')\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"code\", {\n            ...props,\n            children: children\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this);\n        },\n        // For headings, ensure an ID is applied\n        h1: ({\n          children\n        }) => /*#__PURE__*/_jsxDEV(\"h1\", {\n          id: children.toString().toLowerCase().replace(/\\s+/g, '-').replace(/[^\\w\\-]+/g, ''),\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }, this),\n        h2: ({\n          children\n        }) => /*#__PURE__*/_jsxDEV(\"h2\", {\n          id: children.toString().toLowerCase().replace(/\\s+/g, '-').replace(/[^\\w\\-]+/g, ''),\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }, this),\n        h3: ({\n          children\n        }) => /*#__PURE__*/_jsxDEV(\"h3\", {\n          id: children.toString().toLowerCase().replace(/\\s+/g, '-').replace(/[^\\w\\-]+/g, ''),\n          children: children\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }, this)\n        // You can extend this for h4, h5, etc. if needed\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n_s(MarkdownComponent, \"oNm/x9WZg9OkqsemXr5gQoqoCWc=\");\n_c2 = MarkdownComponent;\nexport default MarkdownComponent;\nvar _c, _c2;\n$RefreshReg$(_c, \"CodeBlock\");\n$RefreshReg$(_c2, \"MarkdownComponent\");","map":{"version":3,"names":["React","useState","useEffect","ReactMarkdown","Prism","SyntaxHighlighter","solarizedlight","jsxDEV","_jsxDEV","CodeBlock","language","value","handleCopyClick","navigator","clipboard","writeText","then","alert","catch","err","className","children","style","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","MarkdownComponent","markdownFile","_s","markdownContent","setMarkdownContent","fetch","response","text","components","code","node","inline","props","replace","String","h1","id","toString","toLowerCase","h2","h3","_c2","$RefreshReg$"],"sources":["/home/s/Documents/starryskygithub/projects/learngit/src/MarkdownComponent.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import marked from 'marked';\n\n// function MarkdownComponent({ markdownFile }) {\n//   const [html, setHtml] = useState('');\n\n//   useEffect(() => {\n//     fetch(markdownFile)\n//       .then(response => response.text())\n//       .then(text => setHtml(marked(text)));\n//   }, [markdownFile]);\n\n//   return (\n//     <div className=\"markdown-main\" dangerouslySetInnerHTML={{ __html: html }} />\n//   );\n// }\n\n\n// export default MarkdownComponent;\n// import React, { useState, useEffect } from 'react';\n// import ReactMarkdown from 'react-markdown';\n// import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\n// import { solarizedlight } from 'react-syntax-highlighter/dist/esm/styles/prism';\n// import './MarkdownComponent.css';  // For styling the markdown\n\n// // Custom component to render code blocks with syntax highlighting\n// const CodeBlock = ({ language, value }) => {\n//   return (\n//     <SyntaxHighlighter language={language || 'javascript'} style={solarizedlight}>\n//       {value}\n//     </SyntaxHighlighter>\n//   );\n// };\n\n// function MarkdownComponent({ markdownFile }) {\n//   const [markdownContent, setMarkdownContent] = useState('');\n\n//   useEffect(() => {\n//     fetch(markdownFile)\n//       .then(response => response.text())\n//       .then(text => setMarkdownContent(text));\n//   }, [markdownFile]);\n\n//   return (\n//     <div className=\"markdown-main\">\n//       {/* Render the markdown content using react-markdown */}\n//       <ReactMarkdown\n//         children={markdownContent}\n//         components={{\n//           code: ({ node, inline, className, children, ...props }) => {\n//             // Safe fallback for className check without optional chaining\n//             const language = className ? className.replace('language-', '') : null;\n//             return !inline ? (\n//               <CodeBlock language={language} value={String(children).replace(/\\n$/, '')} />\n//             ) : (\n//               <code {...props}>{children}</code>\n//             );\n//           },\n//         }}\n//       />\n//     </div>\n//   );\n// }\n\n// export default MarkdownComponent;\nimport React, { useState, useEffect } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { solarizedlight } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport './MarkdownComponent.css';  // For styling the markdown\n\n// Custom component to render code blocks with syntax highlighting\nconst CodeBlock = ({ language, value }) => {\n  const handleCopyClick = () => {\n    // Copy the code to the clipboard\n    navigator.clipboard.writeText(value).then(() => {\n      alert('Code copied to clipboard!');\n    }).catch(err => {\n      alert('Failed to copy code: ', err);\n    });\n  };\n\n  return (\n    <div className=\"code-block-container\">\n      <SyntaxHighlighter language={language || 'javascript'} style={solarizedlight}>\n        {value}\n      </SyntaxHighlighter>\n      <button className=\"copy-button\" onClick={handleCopyClick}>\n        Copy Code\n      </button>\n    </div>\n  );\n};\n\nfunction MarkdownComponent({ markdownFile }) {\n  const [markdownContent, setMarkdownContent] = useState('');\n\n  useEffect(() => {\n    fetch(markdownFile)\n      .then(response => response.text())\n      .then(text => setMarkdownContent(text));\n  }, [markdownFile]);\n\n  return (\n    <div className=\"markdown-main\">\n      {/* Render the markdown content using react-markdown */}\n      <ReactMarkdown\n        children={markdownContent}\n        components={{\n          // Handle code blocks and apply syntax highlighting\n          code: ({ node, inline, className, children, ...props }) => {\n            const language = className ? className.replace('language-', '') : null;\n            return !inline ? (\n              <CodeBlock language={language} value={String(children).replace(/\\n$/, '')} />\n            ) : (\n              <code {...props}>{children}</code>\n            );\n          },\n\n          // For headings, ensure an ID is applied\n          h1: ({ children }) => (\n            <h1 id={children.toString().toLowerCase().replace(/\\s+/g, '-').replace(/[^\\w\\-]+/g, '')}>\n              {children}\n            </h1>\n          ),\n          h2: ({ children }) => (\n            <h2 id={children.toString().toLowerCase().replace(/\\s+/g, '-').replace(/[^\\w\\-]+/g, '')}>\n              {children}\n            </h2>\n          ),\n          h3: ({ children }) => (\n            <h3 id={children.toString().toLowerCase().replace(/\\s+/g, '-').replace(/[^\\w\\-]+/g, '')}>\n              {children}\n            </h3>\n          ),\n          // You can extend this for h4, h5, etc. if needed\n        }}\n      />\n    </div>\n  );\n}\n\nexport default MarkdownComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}